# mcp/core/security/jwt_manager.py
# This file contains logic for creating, decoding, and validating JSON Web Tokens (JWTs).

# from datetime import datetime, timedelta, timezone
# from typing import Optional, Dict, Any
# from jose import JWTError, jwt
# from mcp.core.config import settings # To get SECRET_KEY, ALGORITHM, EXPIRE_MINUTES

# class JWTManager:
#     @staticmethod
#     def create_access_token(data: dict, expires_delta: Optional[timedelta] = None) -> str:
#         to_encode = data.copy()
#         if expires_delta:
#             expire = datetime.now(timezone.utc) + expires_delta
#         else:
#             expire = datetime.now(timezone.utc) + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
#         to_encode.update({"exp": expire})
#         encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)
#         return encoded_jwt

#     @staticmethod
#     def decode_token(token: str, secret_key: str) -> Optional[Dict[str, Any]]:
#         try:
#             payload = jwt.decode(token, secret_key, algorithms=[settings.ALGORITHM])
#             return payload
#         except JWTError:
#             return None

#     # Potentially add methods for refresh tokens if implementing that strategy.
