# mcp/core/config.py
# This file manages application settings and configurations.
# It typically uses Pydantic's BaseSettings to load configurations
# from environment variables, .env files, or other sources.

# from pydantic_settings import BaseSettings, SettingsConfigDict
# from typing import Optional

# class Settings(BaseSettings):
#     PROJECT_NAME: str = "Model Context Protocol (MCP)"
#     API_V1_STR: str = "/api/v1"

#     # Database settings
#     DATABASE_URL: str = "postgresql://user:password@host:port/dbname"
#     # Example for async driver for SQLAlchemy if needed by some parts
#     # ASYNC_DATABASE_URL: Optional[str] = None 

#     # Redis settings
#     REDIS_HOST: str = "localhost"
#     REDIS_PORT: int = 6379
#     REDIS_DB: int = 0
#     REDIS_URL: Optional[str] = None # Can be constructed or provided directly

#     # Security settings
#     SECRET_KEY: str = "a_very_secret_key_that_should_be_changed" # CHANGE THIS!
#     ALGORITHM: str = "HS256"
#     ACCESS_TOKEN_EXPIRE_MINUTES: int = 60 * 24 # 1 day

#     # LLM API Keys (example for Anthropic, add others as needed)
#     ANTHROPIC_API_KEY: Optional[str] = None
#     # OPENAI_API_KEY: Optional[str] = None

#     # Papermill (Notebook execution) settings if any
#     # NOTEBOOK_EXECUTION_TIMEOUT_SECONDS: int = 3600

#     # Configure Pydantic BaseSettings
#     model_config = SettingsConfigDict(
#         env_file=".env",          # Load .env file (but main.py loads it earlier explicitly)
#         env_file_encoding="utf-8",
#         case_sensitive=True,      # Environment variables are case-sensitive
#         extra="ignore"            # Ignore extra fields from environment
#     )

#     # Helper to construct Redis URL if not directly provided
#     # from pydantic import model_validator
#     # @model_validator(mode='after')
#     # def get_redis_url_if_not_set(cls, values):
#     #     if not values.get('REDIS_URL') and values.get('REDIS_HOST'):
#     #         values['REDIS_URL'] = f"redis://{values['REDIS_HOST']}:{values['REDIS_PORT']}/{values['REDIS_DB']}"
#     #     return values


# settings = Settings()
