# mcp/core/mcp_registry_service.py
# This file contains the service layer logic for managing MCPDefinitions and MCPVersions.
# It acts as an intermediary between the API layer (routers) and the data access layer (CRUD operations).
# Responsibilities include:
# - Business logic related to creating, retrieving, updating, deleting MCPs.
# - Enforcing any rules or constraints (e.g., versioning schemes, uniqueness).
# - Potentially handling more complex lookups or aggregations.
# - Semantic search integration (future).

# from sqlalchemy.orm import Session
# from typing import List, Optional
# from mcp.db.crud import crud_mcp_definition, crud_mcp_version
# from mcp.db.models import MCPDefinition, MCPVersion
# from mcp.schemas import mcp_definition_schemas, mcp_version_schemas
# from mcp.core.mcp_configs import parse_mcp_config # If needed for validation/transformation here

# class MCPRegistryService:
#     def __init__(self, db_session: Session):
#         self.db_session = db_session

#     async def create_definition(self, mcp_def_in: mcp_definition_schemas.MCPDefinitionCreate, owner_id: int) -> MCPDefinition:
#         # Add any business logic before creating, e.g., checking for name uniqueness per owner
#         return crud_mcp_definition.create(self.db_session, obj_in=mcp_def_in, owner_id=owner_id)

#     async def create_version(self, mcp_version_in: mcp_version_schemas.MCPVersionCreate) -> MCPVersion:
#         # Validate that the mcp_version_in.mcp_type matches the mcp_type of the parent definition
#         definition = crud_mcp_definition.get(self.db_session, id=mcp_version_in.mcp_definition_id)
#         if not definition:
#             raise ValueError("Parent MCPDefinition not found.")
#         if definition.mcp_type != mcp_version_in.mcp_type:
#             raise ValueError(f"MCPVersion type '{mcp_version_in.mcp_type}' does not match Definition type '{definition.mcp_type}'.")
        
#         # The mcp_version_in.config is already a Pydantic model (e.g., LLMConfig) due to API schema validation.
#         # The CRUD layer will handle serializing this to JSONB.
#         return crud_mcp_version.create_with_definition(
#             db=self.db_session,
#             obj_in=mcp_version_in,
#             definition_id=mcp_version_in.mcp_definition_id
#         )

#     async def get_definition(self, definition_id: int) -> Optional[MCPDefinition]:
#         return crud_mcp_definition.get(self.db_session, id=definition_id)

#     async def get_version(self, version_id: int) -> Optional[MCPVersion]:
#         # When retrieving, the MCPVersion.config property will deserialize JSONB to Pydantic model
#         return crud_mcp_version.get(self.db_session, id=version_id)

#     async def list_definitions(self, skip: int = 0, limit: int = 100) -> List[MCPDefinition]:
#         return crud_mcp_definition.get_multi(self.db_session, skip=skip, limit=limit)

    # Add other service methods for update, delete, list versions for a definition, etc.
    # Add semantic search methods here in the future.
