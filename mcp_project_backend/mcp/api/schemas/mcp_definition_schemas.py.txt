# mcp/api/schemas/mcp_definition_schemas.py
# This file contains Pydantic models for MCPDefinition entities.
# These define the structure for creating, reading, and updating MCP definitions
# (the high-level component, not a specific version's config).

# from pydantic import BaseModel
# from typing import Optional, List
# from mcp.core.mcp_configs import SpecificComponentType # Using the same enum as frontend for consistency

# class MCPDefinitionBase(BaseModel):
#     name: str
#     description: Optional[str] = None
#     # The 'type' here refers to the general category, matching SpecificComponentType
#     # This is distinct from the 'type' discriminator within the MCPConfigPayload itself.
#     mcp_type: SpecificComponentType 
#     tags: Optional[List[str]] = []

# class MCPDefinitionCreate(MCPDefinitionBase):
#     pass

# class MCPDefinitionUpdate(MCPDefinitionBase):
#     name: Optional[str] = None # Allow partial updates
#     mcp_type: Optional[SpecificComponentType] = None

# class MCPDefinitionRead(MCPDefinitionBase):
#     id: int
#     owner_id: Optional[int] = None # Example if there's ownership

#     class Config:
#         orm_mode = True # For Pydantic v1, or from_attributes = True for Pydantic v2
