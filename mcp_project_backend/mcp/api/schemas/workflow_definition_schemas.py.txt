# mcp/api/schemas/workflow_definition_schemas.py
# This file contains Pydantic models for WorkflowDefinition and WorkflowStep entities.

# from pydantic import BaseModel, Field
# from typing import Optional, List, Dict, Any

# class WorkflowStepBase(BaseModel):
#     name: str
#     mcp_version_id: int # ID of the specific MCPVersion to use for this step
#     description: Optional[str] = None
#     # How inputs are mapped to this step's MCP.
#     # E.g., {"mcp_input_param_name": {"source_step_id": "step_A_id", "source_output_name": "output_X"}}
#     # Or {"mcp_input_param_name": {"static_value": "some value"}}
#     input_mappings: Optional[Dict[str, Any]] = {}
#     order: int # Execution order of the step within the workflow

# class WorkflowStepCreate(WorkflowStepBase):
#     pass

# class WorkflowStepRead(WorkflowStepBase):
#     id: int
#     workflow_definition_id: int

#     class Config:
#         orm_mode = True

# class WorkflowDefinitionBase(BaseModel):
#     name: str
#     description: Optional[str] = None
#     tags: Optional[List[str]] = []

# class WorkflowDefinitionCreate(WorkflowDefinitionBase):
#     steps: Optional[List[WorkflowStepCreate]] = []

# class WorkflowDefinitionUpdate(WorkflowDefinitionBase):
#     name: Optional[str] = None
#     # Updating steps might be complex; often handled by dedicated step endpoints or re-creation.

# class WorkflowDefinitionRead(WorkflowDefinitionBase):
#     id: int
#     steps: List[WorkflowStepRead] = []
#     owner_id: Optional[int] = None

#     class Config:
#         orm_mode = True
