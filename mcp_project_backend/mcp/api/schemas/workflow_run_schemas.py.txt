# mcp/api/schemas/workflow_run_schemas.py
# This file contains Pydantic models for WorkflowRun entities and related execution data.

# from pydantic import BaseModel, Field
# from typing import Optional, List, Dict, Any
# from datetime import datetime
# from enum import Enum

# class WorkflowRunStatusEnum(str, Enum): # Matches frontend types.ts
#     PENDING = "Pending"
#     RUNNING = "Running"
#     SUCCESS = "Success"
#     FAILED = "Failed"
#     ABORTED = "Aborted"

# class WorkflowRunStepLogSchema(BaseModel): # Example for a log/event within a step
#     id: int
#     timestamp: datetime
#     step_name: str # Or step_id
#     event_type: str # e.g., "LOG", "STATUS_UPDATE", "ERROR", "ARTIFACT_PRODUCED"
#     message: Optional[str] = None
#     payload: Optional[Dict[str, Any]] = None

#     class Config:
#         orm_mode = True

# class WorkflowRunBase(BaseModel):
#     workflow_definition_id: int
#     status: WorkflowRunStatusEnum = WorkflowRunStatusEnum.PENDING
#     # Potentially inputs provided at runtime, if not all defined in WorkflowDefinition
#     runtime_inputs: Optional[Dict[str, Any]] = None

# class WorkflowRunCreateRequest(BaseModel): # For POST /workflows/{id}/execute
#     # Could include specific parameters to override or provide at runtime
#     runtime_parameters: Optional[Dict[str, Any]] = None

# class WorkflowRunRead(WorkflowRunBase):
#     id: int # Or UUID
#     created_at: datetime
#     started_at: Optional[datetime] = None
#     ended_at: Optional[datetime] = None
#     duration_seconds: Optional[float] = None # Calculated
#     outputs: Optional[Dict[str, Any]] = None # Final outputs of the workflow
#     # logs_or_events: List[WorkflowRunStepLogSchema] = [] # Detailed step events

#     class Config:
#         orm_mode = True
