# mcp/api/routers/workflow_execution_routes.py
# This file defines API endpoints related to executing workflows and managing their runs.
# - Endpoint to trigger the execution of a defined workflow.
# - Endpoints to get the status and results of a specific workflow run (non-SSE).
# - Endpoints to list historical workflow runs.
# - Endpoint to abort a running workflow (if feasible).

# Example (conceptual):
# from fastapi import APIRouter, Depends, HTTPException, status
# from sqlalchemy.orm import Session
# from typing import List
# from mcp.api.deps import get_db_session, get_current_active_user
# from mcp.schemas.workflow_run_schemas import WorkflowRunRead, WorkflowRunCreateRequest # Example
# from mcp.core.workflow_engine_service import WorkflowEngineService
# from mcp.db.crud.crud_workflow_run import crud_workflow_run
# from mcp.db.models.user import User

# router = APIRouter()

# @router.post("/{workflow_definition_id}/execute", response_model=WorkflowRunRead)
# async def execute_workflow(
#     workflow_definition_id: int,
#     # execution_params: WorkflowRunCreateRequest, # If params can be passed at execution time
#     db: Session = Depends(get_db_session),
#     current_user: User = Depends(get_current_active_user)
# ):
#     engine = WorkflowEngineService(db_session=db, current_user=current_user)
#     try:
#         # The engine service handles creating the WorkflowRun entry and starting execution
#         workflow_run = await engine.execute_workflow(workflow_definition_id=workflow_definition_id)
#         return workflow_run
#     except Exception as e: # Replace with more specific exceptions
#         raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))

# @router.get("/runs/{run_id}", response_model=WorkflowRunRead)
# async def get_workflow_run_details(
#     run_id: int, # Or UUID
#     db: Session = Depends(get_db_session),
#     current_user: User = Depends(get_current_active_user)
# ):
#     # Add permission checks
#     workflow_run = crud_workflow_run.get(db, id=run_id)
#     if not workflow_run:
#         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Workflow run not found")
#     return workflow_run

# # ... other endpoints to list runs, abort, etc. ...
