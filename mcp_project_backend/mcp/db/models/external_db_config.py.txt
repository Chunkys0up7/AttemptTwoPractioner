# mcp/db/models/external_db_config.py
# Defines the SQLAlchemy ORM model for storing configurations of external databases
# that MCP components might need to connect to.

# from sqlalchemy import Column, Integer, String, Text
# from sqlalchemy.dialects.postgresql import JSONB # For additional_params
# from mcp.db.base import Base # Assuming Base is defined in mcp.db.base

# class ExternalDatabaseConfig(Base):
#     __tablename__ = "external_database_configs"

#     id = Column(Integer, primary_key=True, index=True)
#     name = Column(String, unique=True, nullable=False, index=True, comment="User-friendly name for this connection")
    
#     db_type = Column(String, nullable=False, comment="Type of the database, e.g., 'postgresql', 'mysql', 'bigquery', 'sqlite'")
    
#     # Common connection parameters
#     host = Column(String, nullable=True)
#     port = Column(Integer, nullable=True)
#     database_name = Column(String, nullable=True, comment="Database name or BigQuery dataset ID")
#     username = Column(String, nullable=True)
    
#     # Password / Credentials:
#     # Storing passwords directly is NOT recommended for production.
#     # Instead, store a reference to a secret in a secure vault (e.g., HashiCorp Vault, AWS Secrets Manager).
#     # For local dev, a password field might be used, but with strong warnings.
#     password_secret_ref = Column(String, nullable=True, comment="Reference to the secret storing the password/credentials")
#     # Alternatively, for very simple setups or non-sensitive DBs (not recommended):
#     # encrypted_password = Column(String, nullable=True) 

#     # Additional type-specific parameters (e.g., BigQuery project_id, SSL cert paths)
#     additional_params = Column(JSONB, nullable=True, default=dict, comment="JSON object for type-specific connection parameters")

#     description = Column(Text, nullable=True, comment="Optional description of the connection")

    # Example of how it might be related back to MCPVersions if an MCP declares it needs this connection
    # (This relationship might be better managed as a list of IDs on MCPVersion or a link table)
    # mcp_versions_using = relationship("MCPVersion", secondary="mcp_version_external_db_link_table", back_populates="external_db_connections")

    # Add __repr__ for easier debugging
    # def __repr__(self):
    #     return f"<ExternalDatabaseConfig(id={self.id}, name='{self.name}', type='{self.db_type}')>"


# # Optional: Link table for many-to-many between MCPVersion and ExternalDatabaseConfig
# # from sqlalchemy import Table
# # mcp_version_external_db_link_table = Table('mcp_version_external_db_link', Base.metadata,
# #     Column('mcp_version_id', Integer, ForeignKey('mcp_versions.id'), primary_key=True),
# #     Column('external_db_config_id', Integer, ForeignKey('external_database_configs.id'), primary_key=True)
# # )
# # Then, on MCPVersion model:
# # external_db_connections = relationship("ExternalDatabaseConfig", secondary=mcp_version_external_db_link_table, back_populates="mcp_versions_using")
