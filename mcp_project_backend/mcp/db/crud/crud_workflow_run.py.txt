# mcp/db/crud/crud_workflow_run.py
# CRUD operations specific to WorkflowRun model and potentially related logs/events.

# from sqlalchemy.orm import Session
# from .base_crud import CRUDBase
# from mcp.db.models.workflow_run import WorkflowRun # , WorkflowRunStepLog
# from mcp.api.schemas.workflow_run_schemas import WorkflowRunStatusEnum # Schemas for create/update might be simpler
# from typing import Optional, Dict, Any
# from datetime import datetime, timezone

# # Assuming a simple Create schema for WorkflowRun that mainly takes definition_id and initial status
# class WorkflowRunCreateSchemaForCrud(BaseModel): # Placeholder, define properly in schemas
#     workflow_definition_id: int
#     status: WorkflowRunStatusEnum = WorkflowRunStatusEnum.PENDING
#     initial_inputs: Optional[Dict[str, Any]] = None
#     triggered_by_actor_id: Optional[str] = None

# class WorkflowRunUpdateSchemaForCrud(BaseModel): # Placeholder for updates
#     status: Optional[WorkflowRunStatusEnum] = None
#     started_at: Optional[datetime] = None
#     ended_at: Optional[datetime] = None
#     final_outputs: Optional[Dict[str, Any]] = None
#     error_message: Optional[str] = None


# class CRUDWorkflowRun(CRUDBase[WorkflowRun, WorkflowRunCreateSchemaForCrud, WorkflowRunUpdateSchemaForCrud]):
#     def create_for_definition(
#         self,
#         db: Session,
#         *,
#         workflow_definition_id: int,
#         status: WorkflowRunStatusEnum,
#         initial_inputs: Optional[Dict[str, Any]] = None,
#         triggered_by: Optional[str] = None
#     ) -> WorkflowRun:
#         db_obj = self.model(
#             workflow_definition_id=workflow_definition_id,
#             status=status,
#             initial_inputs=initial_inputs,
#             triggered_by_actor_id=triggered_by,
#             created_at=datetime.now(timezone.utc) # Ensure UTC
#         )
#         db.add(db_obj)
#         db.commit()
#         db.refresh(db_obj)
#         return db_obj

#     def update_status(
#         self, db: Session, *, run_id: int, status: WorkflowRunStatusEnum, error_message: Optional[str] = None
#     ) -> Optional[WorkflowRun]:
#         db_obj = self.get(db, id=run_id)
#         if db_obj:
#             db_obj.status = status
#             if status == WorkflowRunStatusEnum.RUNNING and not db_obj.started_at:
#                 db_obj.started_at = datetime.now(timezone.utc)
#             if status in [WorkflowRunStatusEnum.SUCCESS, WorkflowRunStatusEnum.FAILED, WorkflowRunStatusEnum.ABORTED] and not db_obj.ended_at:
#                 db_obj.ended_at = datetime.now(timezone.utc)
#             if error_message:
#                 db_obj.error_message = error_message
            
#             db.add(db_obj)
#             db.commit()
#             db.refresh(db_obj)
#         return db_obj

    # Add methods for adding step logs/events, updating final outputs etc.
    # def add_step_log_to_run(self, db: Session, *, run_id: int, log_data: Dict[str, Any]) -> Optional[WorkflowRunStepLog]:
    #    # ... create and add WorkflowRunStepLog ...


# crud_workflow_run = CRUDWorkflowRun(WorkflowRun)
# # crud_workflow_run_step_log = CRUDBase(WorkflowRunStepLog, ... ) # If separate CRUD for logs
