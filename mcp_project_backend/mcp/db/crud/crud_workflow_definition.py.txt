# mcp/db/crud/crud_workflow_definition.py
# CRUD operations specific to WorkflowDefinition and WorkflowStep models.

# from sqlalchemy.orm import Session
# from .base_crud import CRUDBase
# from mcp.db.models.workflow_definition import WorkflowDefinition, WorkflowStep
# from mcp.api.schemas.workflow_definition_schemas import WorkflowDefinitionCreate, WorkflowDefinitionUpdate, WorkflowStepCreate
# from typing import Optional, List

# class CRUDWorkflowStep(CRUDBase[WorkflowStep, WorkflowStepCreate, WorkflowStepCreate]): # Update schema might differ
#     # Specific methods for WorkflowStep if needed, e.g., creating steps linked to a definition
#     pass

# class CRUDWorkflowDefinition(CRUDBase[WorkflowDefinition, WorkflowDefinitionCreate, WorkflowDefinitionUpdate]):
#     def create_with_steps(self, db: Session, *, obj_in: WorkflowDefinitionCreate, owner_id: Optional[int] = None) -> WorkflowDefinition:
#         # obj_in_data = obj_in.model_dump(exclude={"steps"}) # Pydantic v2
#         obj_in_data = obj_in.dict(exclude={"steps"}) # Pydantic v1
        
#         # if owner_id:
#         #     obj_in_data["owner_id"] = owner_id
        
#         db_obj = self.model(**obj_in_data)
#         db.add(db_obj)
#         # Commit here to get db_obj.id for steps if not using flush
#         db.commit() 
#         db.refresh(db_obj)

#         if obj_in.steps:
#             for step_in in obj_in.steps:
#                 step_db_obj_data = step_in.model_dump()
#                 step_db_obj = WorkflowStep(**step_db_obj_data, workflow_definition_id=db_obj.id)
#                 db.add(step_db_obj)
#             db.commit() # Commit steps
#             db.refresh(db_obj) # Refresh to get steps loaded in relationship
        
#         return db_obj

#     def get_with_steps(self, db: Session, id: int) -> Optional[WorkflowDefinition]:
#         # This would rely on SQLAlchemy's relationship loading (e.g., joinedload or selectinload)
#         # or ensure steps are eagerly loaded by default if always needed.
#         return db.query(self.model).filter(self.model.id == id).first() # Default is lazy loading for steps

#     # Add specific methods for updating steps, reordering, etc.

# crud_workflow_definition = CRUDWorkflowDefinition(WorkflowDefinition)
# crud_workflow_step = CRUDWorkflowStep(WorkflowStep) # If needed directly
