# mcp/db/base.py
# This file (often named database.py as well) initializes the SQLAlchemy engine,
# SessionLocal, and the declarative Base for ORM models.

# from sqlalchemy import create_engine
# from sqlalchemy.ext.declarative import declarative_base
# from sqlalchemy.orm import sessionmaker
# from mcp.core.config import settings # To get DATABASE_URL

# SQLALCHEMY_DATABASE_URL = settings.DATABASE_URL

# # Create SQLAlchemy engine
# # For PostgreSQL, connect_args might be needed for specific settings
# # For SQLite in-memory for testing: "sqlite:///:memory:"
# engine = create_engine(SQLALCHEMY_DATABASE_URL) # Add connect_args if needed, e.g. {"check_same_thread": False} for SQLite

# # Create a SessionLocal class, which will be a factory for new Session objects
# SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# # Create a Base class for declarative class definitions
# # All ORM models will inherit from this Base.
# Base = declarative_base()

# # Optional: Function to create database tables (usually for initial setup or testing)
# # def init_db():
# #     # Import all modules here that define models so that
# #     # they will be registered properly on the metadata. Otherwise
# #     # you will have to import them first before calling init_db()
# #     from .models import user, mcp_definition # etc.
# #     Base.metadata.create_all(bind=engine)
