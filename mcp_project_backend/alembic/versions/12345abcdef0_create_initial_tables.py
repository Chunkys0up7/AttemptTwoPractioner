"""create_initial_tables

Revision ID: 12345abcdef0
Revises: 
Create Date: YYYY-MM-DD HH:MM:SS.ffffff

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '12345abcdef0'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Create custom ENUM type for WorkflowRunStatus if it doesn't exist
    # Note: For PostgreSQL, SAEnum often creates the type automatically if `create_type=True`
    # in the model definition. If `create_type=False` (as we have), we need to manage it.
    # However, direct creation here is more explicit for migrations.
    workflow_run_status_enum = postgresql.ENUM(
        'PENDING', 'RUNNING', 'SUCCESS', 'FAILED', 'CANCELLED', name='workflow_run_status_enum', create_type=True)
    workflow_run_status_enum.create(op.get_bind(), checkfirst=True)

    op.create_table('mcp_definitions',
                    sa.Column('id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('name', sa.String(length=255), nullable=False),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=False),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_mcp_definitions')),
                    sa.UniqueConstraint('name', name=op.f(
                        'uq_mcp_definitions_name'))
                    )
    op.create_index(op.f('ix_mcp_definitions_name'), 'mcp_definitions', [
                    'name'], unique=False)  # unique=False for index, constraint handles uniqueness

    op.create_table('workflow_definitions',
                    sa.Column('id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('name', sa.String(length=255), nullable=False),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('graph_representation', postgresql.JSONB(
                        astext_type=sa.Text()), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=False),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_workflow_definitions')),
                    sa.UniqueConstraint('name', name=op.f(
                        'uq_workflow_definitions_name'))
                    )
    op.create_index(op.f('ix_workflow_definitions_name'),
                    'workflow_definitions', ['name'], unique=False)

    op.create_table('mcp_versions',
                    sa.Column('id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('mcp_definition_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('version_string', sa.String(
                        length=50), nullable=False),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('mcp_type', sa.String(
                        length=100), nullable=False),
                    sa.Column('config_payload_data', postgresql.JSONB(
                        astext_type=sa.Text()), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['mcp_definition_id'], ['mcp_definitions.id'], name=op.f(
                        'fk_mcp_versions_mcp_definition_id_mcp_definitions')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_mcp_versions')),
                    sa.UniqueConstraint('mcp_definition_id', 'version_string', name=op.f(
                        'uq_mcp_versions_mcp_definition_id_version_string'))
                    )
    op.create_index(op.f('ix_mcp_versions_mcp_definition_id'),
                    'mcp_versions', ['mcp_definition_id'], unique=False)
    op.create_index(op.f('ix_mcp_versions_mcp_type'),
                    'mcp_versions', ['mcp_type'], unique=False)

    op.create_table('workflow_runs',
                    sa.Column('id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('workflow_definition_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('status', workflow_run_status_enum,
                              nullable=False),
                    sa.Column('run_parameters', postgresql.JSONB(
                        astext_type=sa.Text()), nullable=True),
                    sa.Column('results', postgresql.JSONB(
                        astext_type=sa.Text()), nullable=True),
                    sa.Column('logs', sa.Text(), nullable=True),
                    sa.Column('started_at', sa.DateTime(), nullable=True),
                    sa.Column('ended_at', sa.DateTime(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['workflow_definition_id'], ['workflow_definitions.id'], name=op.f(
                        'fk_workflow_runs_workflow_definition_id_workflow_definitions')),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk_workflow_runs'))
                    )
    op.create_index(op.f('ix_workflow_runs_status'),
                    'workflow_runs', ['status'], unique=False)
    op.create_index(op.f('ix_workflow_runs_workflow_definition_id'),
                    'workflow_runs', ['workflow_definition_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_workflow_runs_workflow_definition_id'),
                  table_name='workflow_runs')
    op.drop_index(op.f('ix_workflow_runs_status'), table_name='workflow_runs')
    op.drop_table('workflow_runs')

    op.drop_index(op.f('ix_mcp_versions_mcp_type'), table_name='mcp_versions')
    op.drop_index(op.f('ix_mcp_versions_mcp_definition_id'),
                  table_name='mcp_versions')
    # Note: Unique constraint uq_mcp_versions_mcp_definition_id_version_string is dropped with table or explicitly if needed
    op.drop_table('mcp_versions')

    op.drop_index(op.f('ix_workflow_definitions_name'),
                  table_name='workflow_definitions')
    op.drop_table('workflow_definitions')

    op.drop_index(op.f('ix_mcp_definitions_name'),
                  table_name='mcp_definitions')
    op.drop_table('mcp_definitions')

    # Drop custom ENUM type
    workflow_run_status_enum = postgresql.ENUM(
        'PENDING', 'RUNNING', 'SUCCESS', 'FAILED', 'CANCELLED', name='workflow_run_status_enum', create_type=False)
    workflow_run_status_enum.drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
