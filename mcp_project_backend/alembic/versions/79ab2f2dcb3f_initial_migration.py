"""Initial migration

Revision ID: 79ab2f2dcb3f
Revises: None
Create Date: 2025-06-07 10:01:23.788398

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '79ab2f2dcb3f'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('action_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('actor_id', sa.String(), nullable=True),
    sa.Column('action_type', sa.String(), nullable=False),
    sa.Column('entity_type', sa.String(), nullable=True),
    sa.Column('entity_id', sa.String(), nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_action_logs'))
    )
    with op.batch_alter_table('action_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_action_logs_action_type'), ['action_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_action_logs_actor_id'), ['actor_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_action_logs_entity_id'), ['entity_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_action_logs_entity_type'), ['entity_type'], unique=False)
        batch_op.create_index('ix_action_logs_timestamp', ['timestamp'], unique=False)

    op.create_table('api_keys',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('key_hash', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_by', sa.String(), nullable=False),
    sa.Column('owner_id', sa.String(), nullable=True),
    sa.Column('owner_type', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_api_keys')),
    sa.UniqueConstraint('key_hash', name=op.f('uq_api_keys_key_hash'))
    )
    with op.batch_alter_table('api_keys', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_api_keys_id'), ['id'], unique=False)

    op.create_table('external_database_configs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False, comment='User-defined name for this database configuration.'),
    sa.Column('description', sa.Text(), nullable=True, comment='Optional description for this configuration.'),
    sa.Column('db_type', sa.String(length=50), nullable=False, comment="Type of the database (e.g., 'postgresql', 'mysql', 'bigquery')."),
    sa.Column('host', sa.String(length=255), nullable=True, comment='Database host address.'),
    sa.Column('port', sa.Integer(), nullable=True, comment='Database port number.'),
    sa.Column('username', sa.String(length=255), nullable=True, comment='Username for database authentication.'),
    sa.Column('password_secret_key', sa.String(length=255), nullable=True, comment='Key or reference to the password/secret in a secrets manager.'),
    sa.Column('database_name', sa.String(length=255), nullable=True, comment='Name of the specific database/schema to connect to.'),
    sa.Column('additional_configs', sa.Text(), nullable=True, comment='JSON string for additional type-specific configurations, e.g., BigQuery project_id, GCS path for service account key.'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_external_database_configs'))
    )
    with op.batch_alter_table('external_database_configs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_external_database_configs_db_type'), ['db_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_external_database_configs_name'), ['name'], unique=True)

    op.create_table('mcp_definitions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_mcp_definitions'))
    )
    with op.batch_alter_table('mcp_definitions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_mcp_definitions_name'), ['name'], unique=True)

    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('role_name', sa.Enum('ADMIN', 'EDITOR', 'VIEWER', name='user_role_enum'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('password_hash', sa.String(length=128), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('username', name=op.f('uq_users_username'))
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_full_name'), ['full_name'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_id'), ['id'], unique=False)

    op.create_table('workflow_definitions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('graph_representation', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_workflow_definitions'))
    )
    with op.batch_alter_table('workflow_definitions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_workflow_definitions_name'), ['name'], unique=True)

    op.create_table('mcp_versions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('mcp_definition_id', sa.UUID(), nullable=False),
    sa.Column('version_number', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('mcp_type', sa.String(), nullable=False),
    sa.Column('config_payload_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('external_db_config_ids', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('visualization_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['mcp_definition_id'], ['mcp_definitions.id'], name=op.f('fk_mcp_versions_mcp_definition_id_mcp_definitions')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_mcp_versions'))
    )
    with op.batch_alter_table('mcp_versions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_mcp_versions_mcp_definition_id'), ['mcp_definition_id'], unique=False)

    op.create_table('workflow_runs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('workflow_definition_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'SUCCESS', 'FAILED', 'CANCELLED', name='workflow_run_status_enum'), nullable=False),
    sa.Column('run_parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('results', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('logs', sa.Text(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('ended_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['workflow_definition_id'], ['workflow_definitions.id'], name=op.f('fk_workflow_runs_workflow_definition_id_workflow_definitions')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_workflow_runs'))
    )
    with op.batch_alter_table('workflow_runs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_workflow_runs_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_workflow_runs_workflow_definition_id'), ['workflow_definition_id'], unique=False)

    op.create_table('workflow_templates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(length=1000), nullable=True),
    sa.Column('category', sa.String(length=100), nullable=True),
    sa.Column('template_metadata', sa.JSON(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_workflow_templates_created_by_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_workflow_templates'))
    )
    op.create_table('workflow_template_versions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('template_id', sa.Integer(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('content', sa.JSON(), nullable=False),
    sa.Column('changes', sa.String(length=1000), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_workflow_template_versions_created_by_users')),
    sa.ForeignKeyConstraint(['template_id'], ['workflow_templates.id'], name=op.f('fk_workflow_template_versions_template_id_workflow_templates')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_workflow_template_versions'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('workflow_template_versions')
    op.drop_table('workflow_templates')
    with op.batch_alter_table('workflow_runs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_workflow_runs_workflow_definition_id'))
        batch_op.drop_index(batch_op.f('ix_workflow_runs_status'))

    op.drop_table('workflow_runs')
    with op.batch_alter_table('mcp_versions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_mcp_versions_mcp_definition_id'))

    op.drop_table('mcp_versions')
    with op.batch_alter_table('workflow_definitions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_workflow_definitions_name'))

    op.drop_table('workflow_definitions')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_id'))
        batch_op.drop_index(batch_op.f('ix_users_full_name'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    with op.batch_alter_table('mcp_definitions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_mcp_definitions_name'))

    op.drop_table('mcp_definitions')
    with op.batch_alter_table('external_database_configs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_external_database_configs_name'))
        batch_op.drop_index(batch_op.f('ix_external_database_configs_db_type'))

    op.drop_table('external_database_configs')
    with op.batch_alter_table('api_keys', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_api_keys_id'))

    op.drop_table('api_keys')
    with op.batch_alter_table('action_logs', schema=None) as batch_op:
        batch_op.drop_index('ix_action_logs_timestamp')
        batch_op.drop_index(batch_op.f('ix_action_logs_entity_type'))
        batch_op.drop_index(batch_op.f('ix_action_logs_entity_id'))
        batch_op.drop_index(batch_op.f('ix_action_logs_actor_id'))
        batch_op.drop_index(batch_op.f('ix_action_logs_action_type'))

    op.drop_table('action_logs')
    # ### end Alembic commands ###
