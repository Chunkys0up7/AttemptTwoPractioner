# alembic/env.py
# This is the Alembic environment script.
# It's used by Alembic to access the database connection and model metadata
# for generating and running migrations.

# from logging.config import fileConfig
# from sqlalchemy import engine_from_config, pool
# from alembic import context

# # this is the Alembic Config object, which provides
# # access to the values within the .ini file in use.
# config = context.config

# # Interpret the config file for Python logging.
# # This line sets up loggers basically.
# if config.config_file_name is not None:
#     fileConfig(config.config_file_name)

# # Add your model's MetaData object here
# # for 'autogenerate' support
# # from myapp import mymodel
# # target_metadata = mymodel.Base.metadata
# # Example: Assuming your Base is in mcp.db.base and models are imported in mcp.db.models
# from mcp.db.base import Base as SQLModelBase # Use your actual Base import
# from mcp.db.models import * # Import all your models so Base.metadata knows about them
# target_metadata = SQLModelBase.metadata

# # other values from the config, defined by the needs of env.py,
# # can be acquired:
# # my_important_option = config.get_main_option("my_important_option")
# # ... etc.

# def get_url():
#     # Try to get from alembic.ini first, then from MCP settings as fallback
#     url = config.get_main_option("sqlalchemy.url")
#     if url:
#         return url
    
#     # If not in alembic.ini, try to load from mcp.core.config (application settings)
#     try:
#         from mcp.core.config import settings
#         return settings.DATABASE_URL
#     except ImportError:
#         raise ImportError(
#             "Could not import MCP settings. Ensure DATABASE_URL is set in alembic.ini "
#             "or MCP project is installed/PYTHONPATH is set correctly."
#         )


# def run_migrations_offline() -> None:
#     """Run migrations in 'offline' mode.
#     This configures the context with just a URL
#     and not an Engine, though an Engine is acceptable
#     here as well.  By skipping the Engine creation
#     we don't even need a DBAPI to be available.
#     Calls to context.execute() here emit the given string to the
#     script output.
#     """
#     url = get_url()
#     context.configure(
#         url=url,
#         target_metadata=target_metadata,
#         literal_binds=True,
#         dialect_opts={"paramstyle": "named"},
#     )

#     with context.begin_transaction():
#         context.run_migrations()


# def run_migrations_online() -> None:
#     """Run migrations in 'online' mode.
#     In this scenario we need to create an Engine
#     and associate a connection with the context.
#     """
#     # Ensure the mcp.core.config is loaded if getting URL from there
#     # This might involve setting up PYTHONPATH if running alembic from root.
#     connectable_config = config.get_section(config.config_ini_section)
#     if connectable_config is None:
#         connectable_config = {} # Initialize if section not found
    
#     # Override sqlalchemy.url if not present or if we prefer the one from settings
#     db_url = get_url()
#     if db_url:
#         connectable_config["sqlalchemy.url"] = db_url


#     connectable = engine_from_config(
#         connectable_config, # Use the potentially modified config
#         prefix="sqlalchemy.",
#         poolclass=pool.NullPool,
#     )

#     with connectable.connect() as connection:
#         context.configure(
#             connection=connection, target_metadata=target_metadata
#         )

#         with context.begin_transaction():
#             context.run_migrations()


# if context.is_offline_mode():
#     run_migrations_offline()
# else:
#     run_migrations_online()
